# vim: fdm=marker fdl=0

from rsf.proj import *
def plotvel(file, title):# {{{
  Plot(file, '''
    grey title="%s" color=j allpos=y pclip=100 bias=1500 gainpanel=1
    scalebar=y barreverse=y barunit=m/s barlabel=Velocity''' % title)
# }}}
def plotcurve(file, title):# {{{
  Plot(file,
    '''sfput n2=1 label1=Iteration unit1= unit2= label2= |
    sfgraph title="%s" dash=0 plotfat=5  grid=y yreverse=n''' % title)
# }}}
def windowAndDraw(vsnaps, base, arr):# {{{
  vels = ''
  for i in arr:
    vels += '%s%s ' % (base, i)
    Plot('%s%d' % (base, i), vsnaps, '''window f3=%d n3=1 |
    grey title="Essfwi, iter %d" color=j allpos=y pclip=100 bias=1500 gainpanel=1
    scalebar=y barreverse=y barunit=m/s barlabel=Velocity''' % (i-1, i))

  Plot('essvelset', vels, 'TwoRows')
# }}}
# fetch marmvel#{{{
#Fetch('marmvel.hh','marm')
Fetch('marmvel.hh', 'marm', server = 'local', top = os.environ['HOME'] + '/data/')
#}}}
# down sampling velocity#{{{
Flow('vel','marmvel.hh',
  '''
  dd form=native |
  window j1=5 j2=5 |
  put label1=Depth  unit1=m label2=Lateral unit2=m
  ''')
#}}}
# smooth initial model#{{{
Flow('smvel', 'vel', '''math output="1/input" |
  smooth rect1=25 rect2=60 |
  math output="1/input"
  ''')
#}}}
# plot real/smoothed velocities#{{{
plotvel('vel', 'Marmousi model')
plotvel('smvel', 'Smoothed model')
Result('marm', 'vel smvel', 'OverUnderAniso')
#}}}
# setup binaries#{{{
bindir    = '../../bin/'
fmbin     = bindir + 'fm-damp'
essfwibin = bindir + 'essfwi-damp'
enfwibin  = bindir + 'enfwi-damp'
normbin   = bindir + 'norm'
noisebin  = bindir + 'noise'
#}}}

task = ARGUMENTS.get('task')
if task == 'fm':
  Flow('shots', 'vel', '''%s
    vinit=${SOURCES[0]} shots=${TARGETS[0]}
    fm=10 amp=1 dt=0.0015 ns=47 ng=461 nt=2000 nb=30
    sxbeg=0 szbeg=6 jsx=10 jsz=0 gxbeg=0 gzbeg=6 jgx=1 jgz=0
    ''' % fmbin, stdout=-1, stdin=0)
  Plot('shots','grey color=g title=shot label2= unit2=', view=0)
elif task == 'essfwi':
  Flow('vsnaps absobjs norobjs', 'smvel shots', '''%s
    vin=${SOURCES[0]} shots=${SOURCES[1]}
    vout=${TARGETS[0]} absobjs=${TARGETS[1]} norobjs=${TARGETS[2]}
    niter=300 nb=30 seed=10 vmin=1500 vmax=5500 maxdv=200 nita=5
    ''' % essfwibin, stdout=-1, stdin=0)
elif task == 'enfwi':
  Flow('vsnaps absobjs norobjs', 'smvel shots',
    '''mpirun -np 1 %s
    vin=${SOURCES[0]} shots=${SOURCES[1]}
    vout=${TARGETS[0]} absobjs=${TARGETS[1]} norobjs=${TARGETS[2]}
    niter=300 nb=30 seed=10 vmin=1450 vmax=5600 maxdv=200 nita=5
    sigfac=0.2 niterenkf=10 nsample=20
    perin=/home/rice/data/marm/velpert533x193x100.bin
    ''' % enfwibin, stdout=-1, stdin=0)
elif task == 'noise':
  Flow('shotsnoise', 'shots', '%s fac=0.05' % noisebin)
  Plot('shotsnoise','grey color=g title=shot label2= unit2=', view=0)

if task == 'enfwi' or task == 'essfwi':
  windowAndDraw('vsnaps', 'vel', [50, 100, 200, 300])
  # plot objs norms#{{{
  plotcurve('absobjs', 'Absolute objective value')
  plotcurve('norobjs', 'Normalized objective value')
  Flow('l1norm l2norm', 'vel vsnaps',   '''%s
    realvel=${SOURCES[0]} velset=${SOURCES[1]}
    l1norm=${TARGETS[0]} l2norm=${TARGETS[1]}
    ''' % normbin, stdout=-1, stdin=0)
  plotcurve('l1norm', 'l1norm')
  plotcurve('l2norm', 'l2norm')
#}}}
End()
